<?xml version="1.0" encoding="UTF-8"?>
<!-- http://sdformat.org/tutorials?tut=spec_world&cat=specification& -->


<!-- MARK: - Primary Variables -->

<%
  shelfWidth = 1.1 # [m]
  shelfLength = 3.3 # [m]
  shelfHeight = 12.5 # [m]
  spaceBetweenShelves = 0.3 # [m]
  columnInfos = [
    {'space' => 3.6, 'doesContainShelf' => false},
    {'space' => shelfWidth, 'doesContainShelf' => true},
    {'space' => spaceBetweenShelves, 'doesContainShelf' => false},
    {'space' => shelfWidth, 'doesContainShelf' => true},
    {'space' => 3.1, 'doesContainShelf' => false},
    {'space' => shelfWidth, 'doesContainShelf' => true},
    {'space' => spaceBetweenShelves, 'doesContainShelf' => false},
    {'space' => shelfWidth, 'doesContainShelf' => true},
    {'space' => 3.1, 'doesContainShelf' => false},
    {'space' => shelfWidth, 'doesContainShelf' => true},
    {'space' => spaceBetweenShelves, 'doesContainShelf' => false},
    {'space' => shelfWidth, 'doesContainShelf' => true},
    {'space' => 3.1, 'doesContainShelf' => false},
    {'space' => shelfWidth, 'doesContainShelf' => true},
    {'space' => spaceBetweenShelves, 'doesContainShelf' => false},
    {'space' => shelfWidth, 'doesContainShelf' => true},
    {'space' => 3.1, 'doesContainShelf' => false},
    {'space' => shelfWidth, 'doesContainShelf' => true},
    {'space' => spaceBetweenShelves, 'doesContainShelf' => false},
    {'space' => shelfWidth, 'doesContainShelf' => true},
    {'space' => 3.1, 'doesContainShelf' => false},
    {'space' => shelfWidth, 'doesContainShelf' => true},
    {'space' => 0.818, 'doesContainShelf' => false}
  ]
  rowInfos = [
    {'space' => 1.0, 'isShelf' => false},
    {'space' => shelfLength, 'isShelf' => true},
    {'space' => shelfLength, 'isShelf' => false},
    {'space' => shelfLength, 'isShelf' => true},
    {'space' => shelfLength, 'isShelf' => true},
    {'space' => shelfLength, 'isShelf' => true},
    {'space' => shelfLength, 'isShelf' => true},
    {'space' => shelfLength, 'isShelf' => true},
    {'space' => shelfLength, 'isShelf' => true},
    {'space' => shelfLength, 'isShelf' => false},
    {'space' => shelfLength, 'isShelf' => true},
    {'space' => shelfLength, 'isShelf' => true},
    {'space' => shelfLength, 'isShelf' => true},
    {'space' => shelfLength, 'isShelf' => true},
    {'space' => shelfLength, 'isShelf' => true},
    {'space' => shelfLength, 'isShelf' => true},
    {'space' => shelfLength, 'isShelf' => false},
    {'space' => shelfLength, 'isShelf' => true},
    {'space' => 1.0, 'isShelf' => false}
  ]

  # lights
  lightAmountAlongLengthAxis = 6
  lightAmountAlongWidthAxis = 6
  lightHeight = shelfHeight*1.5
  ceilingLightInnerAngle = Math::PI/6
  ceilingLightOuterAngle = Math::PI*5/6

  # person
  peopleAmount = 30
%>


<!-- MARK: - Secondary Variables -->
<%
  halfShelfHeight = shelfHeight/2.0
  halfShelfLength = shelfLength/2.0
  halfShelfWidth = shelfWidth/2.0
  initialYawAngle = Math::PI/2.0

  # room spec
  roomLength = columnInfos.map{ |columnInfo| columnInfo['space'] }.sum
  # roomWidth = rowInfos.map{ |rowInfo| rowInfo['space'] }.sum
  roomWidth = 1.0 + 3.3*17 + 6.3*2 # [m]

  # lights
  lightInfos = []
  spaceBetweenLightsAlongLengthAxis = roomLength / (lightAmountAlongLengthAxis+1)
  spaceBetweenLightsAlongWidthAxis = roomWidth / (lightAmountAlongWidthAxis+1)
  counterX = 0
  counterY = 0
  spaceBetweenLightsAlongLengthAxis.step(roomLength - 1e-6, spaceBetweenLightsAlongLengthAxis) do |x|
    spaceBetweenLightsAlongWidthAxis.step(roomWidth - 1e-6, spaceBetweenLightsAlongWidthAxis) do |y|
      lightInfos.push({
        'name' => "ceilingLight_#{counterX}_#{counterY}",
        'position' => [x, y, lightHeight]
      })
      counterY += 1
    end
    counterX += 1
  end

  # template elevator
  templateElevatorCenterX = roomLength - 5.0
  templateElevatorCenterY = roomWidth - 2.5
  templateElevatorHeight = shelfHeight / 2.0
%>


<!-- MARK: - Dummy Variables -->

<%
  cursorX = 0.0
  cursorY = 0.0
  columnIndex = 0
  rowIndex = 0

  shelfNames = []

  # person
  personStartX = rand(1...(roomLength-1))
  personStartY = rand(1...(roomWidth-1))
  personTargetX = rand(1...(roomLength-1))
  personTargetY = rand(1...(roomWidth-1))
%>

<!-- MARK: - Main -->

<sdf version='1.6'>
<world name="warehouse">

  <!-- define camera -->
  <gui>
    <camera name='user_camera'>
      <pose>37.5 -11 34.8 0 0.67 2.3</pose>
    </camera>
  </gui>

  <!-- define physic engine -->
  <!-- <physics name="physics" type="ode" default=true>
    <max_step_size>0.1</max_step_size>
    <real_time_factor>1</real_time_factor>
    <real_time_update_rate>100</real_time_update_rate>
    <max_contacts>5</max_contacts>
    <ode>
      <solver>
        <island_threads>4</island_threads>
        <iters>10</iters>
      </solver>
    </ode>
  </physics> -->


  <!-- define scenes and lights -->
  <scene>
    <ambient>0.2 0.2 0.2 0</ambient>
    <shadow>true</shadow>
  </scene>

  <!--
  <% for lightInfo in lightInfos %>
    <% lightPosition = lightInfo['position'] %>
    <light name="<%=lightInfo['name']%>" type="spot">
      <pose><%=lightPosition[0]%> <%=lightPosition[1]%> <%=lightPosition[2]%> 0 0 0</pose>
      <direction>0 0 -1</direction>
      <cast_shadows>true</cast_shadows>

      <diffuse>1 1 1 1</diffuse>

      <attenuation>
        <range>100</range>
        <constant>0.9</constant>
        <linear>0.1</linear>
      </attenuation>

      <spot>
        <inner_angle><%=ceilingLightInnerAngle%></inner_angle>
        <outer_angle><%=ceilingLightOuterAngle%></outer_angle>
        <falloff>1.0</falloff>
      </spot>
    </light>
  <% end %>
  -->


  <!-- include ground plane -->
  <include>
    <uri>model://ground_plane</uri>
  </include>

  <include>
    <uri>model://sun</uri>
    <pose>0 0 50</pose>
  </include>


  <!-- MARK: - Template Elevator Models -->

  <!-- Include standingLever -->
  <include>
    <uri>model://standingLever</uri>
    <name>standingLever</name>
    <!-- <pose><%=templateElevatorCenterX-3%> <%=templateElevatorCenterY%> 0.5 0 0 0</pose> -->
    <pose>-3 -3 0 0 0 0</pose>
  </include>

  <!-- <plugin filename="libSimEventsPlugin.so" name="elevator_event_plugin">
    <region>
      <name>region1</name>
      <volume>
        <min><%=templateElevatorCenterX-1.0%> <%=templateElevatorCenterY-2.5%> 0</min>
        <max><%=templateElevatorCenterX+1.0%> <%=templateElevatorCenterY-1.5%> 1</max>
      </volume>
    </region>

    <region>
      <name>region2</name>
      <volume>
        <min><%=templateElevatorCenterX-1.0%> <%=templateElevatorCenterY-2.5%> <%=templateElevatorHeight%></min>
        <max><%=templateElevatorCenterX+1.0%> <%=templateElevatorCenterY-1.5%> <%=templateElevatorHeight+1%></max>
      </volume>
    </region>

    <event>
      <name>region1_event</name>
      <type>occupied</type>
      <region>region1</region>
      <topic>~/elevator</topic>
      <msg_data>0</msg_data>
    </event>

    <event>
      <name>region2_event</name>
      <type>occupied</type>
      <region>region2</region>
      <topic>~/elevator</topic>
      <msg_data>1</msg_data>
    </event>
  </plugin> -->



  <!-- ButtonPressedEventPlugin -->
  <!-- <plugin filename="libButtonPressedEvent.so" name="elevator_event_plugin_floor0">
    <event>
      <name>ButtonPressedEvent</name>
      <type>joint</type>
      <model>standingLever::wheel</model>
      <joint>standingLever::supportLShape_wheel</joint>
      <range>
        <type>normalized_angle</type>
        <min><%=Math::PI/2.0%></min>
        <max><%=Math::PI/2.0 + Math::PI/12.0%></max>
      </range>
      <topic>~/elevator</topic>
      <msg_data>0</msg_data>
    </event>
  </plugin>

  <plugin filename="libButtonPressedEvent.so" name="elevator_event_plugin_floor1">
    <event>
      <name>ButtonPressedEvent</name>
      <type>joint</type>
      <model>standingLever::wheel</model>
      <joint>standingLever::supportLShape_wheel</joint>
      <range>
        <type>normalized_angle</type>
        <min>0</min>
        <max><%=Math::PI/(-12.0)%></max>
      </range>
      <topic>~/elevator</topic>
      <msg_data>1</msg_data>
    </event>
  </plugin> -->


  <!-- The elevator car -->
  <model name="elevator">
    <pose><%=templateElevatorCenterX+0%> <%=templateElevatorCenterY+0%> 0.075 0 0 <%=Math::PI/(-2)%></pose>
    <link name="link">
      <inertial>
        <mass>800</mass>
      </inertial>

      <collision name="floor_collision">
        <geometry>
          <box>
            <size>2.25 2.25 0.15</size>
          </box>
        </geometry>
      </collision>
      <visual name="floor_visual">
        <geometry>
          <box>
            <size>2.25 2.25 0.15</size>
          </box>
        </geometry>
      </visual>

      <!-- wall1_collision is the wall to the right of the door, when
           facing the door -->
      <collision name="wall1_collision">
        <pose>1.0745 0.5725 1.125 0 0 0</pose>
        <geometry>
          <box>
            <size>0.1 1.15 2.25</size>
          </box>
        </geometry>
      </collision>
      <visual name="wall1_visual">
        <pose>1.0745 0.5725 1.125 0 0 0</pose>
        <geometry>
          <box>
            <size>0.1 1.15 2.25</size>
          </box>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Red</name>
          </script>
        </material>
      </visual>

      <!-- wall2_collision is the wall to the left of the door, when
           facing the door -->
      <collision name="wall2_collision">
        <pose>1.0745 -1.0625 1.125 0 0 0</pose>
        <geometry>
          <box>
            <size>0.1 0.125 2.25</size>
          </box>
        </geometry>
      </collision>
      <visual name="wall2_visual">
        <pose>1.0745 -1.0625 1.125 0 0 0</pose>
        <geometry>
          <box>
            <size>0.1 0.125 2.25</size>
          </box>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Red</name>
          </script>
        </material>
      </visual>
    </link>

    <link name="door">
      <pose>1.0745 -0.5 1.125 0 0 0</pose>
      <collision name="collision">
        <geometry>
          <box>
            <size>0.08 1.0 2.25</size>
          </box>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <box>
            <size>0.08 1.0 2.25</size>
          </box>
        </geometry>
      </visual>
    </link>

    <joint name="door" type="prismatic">
      <parent>link</parent>
      <child>door</child>
      <axis>
        <xyz>0 1 0</xyz>
        <limit>
          <lower>0</lower>
          <upper>1</upper>
          <effort>10</effort>
        </limit>

        <dynamics>
          <damping>2</damping>
        </dynamics>
      </axis>
    </joint>

    <joint name="lift" type="prismatic">
      <parent>world</parent>
      <child>link</child>
      <axis>
        <xyz>0 0 1</xyz>
        <limit>
          <lower>0</lower>
          <upper>10</upper>
          <effort>100000</effort>
        </limit>

        <dynamics>
          <damping>50</damping>
        </dynamics>
      </axis>
      <physics>
        <ode>
          <implicit_spring_damper>1</implicit_spring_damper>
        </ode>
      </physics>
    </joint>

    <!-- Plugin to control the elevator -->
    <!-- https://github.com/osrf/gazebo/tree/gazebo6/plugins -->
    <plugin filename="libElevatorPlugin.so" name="elevator_plugin">
      <lift_joint>elevator::lift</lift_joint>
      <door_joint>elevator::door</door_joint>
      <floor_height><%=templateElevatorHeight+0.075%></floor_height>

      <!-- Time the elevator door will stay open in seconds -->
      <door_wait_time>30</door_wait_time>

      <!-- This topic is used to control the elevator -->
      <topic>~/elevator</topic>
    </plugin>
  </model>

  <!-- Elevator shaft -->
  <model name="elevator_shaft">
    <static>true</static>
    <pose><%=templateElevatorCenterX%> <%=templateElevatorCenterY%> 0 0 0 <%=Math::PI/(-2)%></pose>
    <link name="link">
      <collision name="shaft_wall1_collision">
        <pose>0 1.25 3 0 0 0</pose>
        <geometry>
          <box>
            <size>2.5 0.15 6</size>
          </box>
        </geometry>
      </collision>
      <visual name="shaft_wall1_visual">
        <pose>0 1.25 <%=templateElevatorHeight%> 0 0 0</pose>
        <geometry>
          <box>
            <size>2.5 0.15 <%=templateElevatorHeight*2%></size>
          </box>
        </geometry>
      </visual>

      <collision name="shaft_wall2_collision">
        <pose>0 -1.25 <%=templateElevatorHeight%> 0 0 0</pose>
        <geometry>
          <box>
            <size>2.5 0.15 <%=templateElevatorHeight*2%></size>
          </box>
        </geometry>
      </collision>
      <visual name="shaft_wall2_visual">
        <pose>0 -1.25 <%=templateElevatorHeight%> 0 0 0</pose>
        <geometry>
          <box>
            <size>2.5 0.15 <%=templateElevatorHeight*2%></size>
          </box>
        </geometry>
      </visual>

      <collision name="shaft_wall3_collision">
        <pose>-1.25 0 <%=templateElevatorHeight%> 0 0 0</pose>
        <geometry>
          <box>
            <size>0.15 2.7 <%=templateElevatorHeight*2%></size>
          </box>
        </geometry>
      </collision>
      <visual name="shaft_wall3_visual">
        <pose>-1.25 0 <%=templateElevatorHeight%> 0 0 0</pose>
        <geometry>
          <box>
            <size>0.15 2.7 <%=templateElevatorHeight*2%></size>
          </box>
        </geometry>
      </visual>

      <collision name="floor0_collision">
        <pose>1.19 0 0.075 0 0 0</pose>
        <geometry>
          <box>
            <size>0.12 2.5 0.15</size>
          </box>
        </geometry>
      </collision>
      <visual name="floor0_visual">
        <pose>1.19 0 0.075 0 0 0</pose>
        <geometry>
          <box>
            <size>0.12 2.5 0.15</size>
          </box>
        </geometry>
      </visual>

      <collision name="floor1_collision">
        <pose>1.19 0 <%=templateElevatorHeight+0.075%> 0 0 0</pose>
        <geometry>
          <box>
            <size>0.12 2.5 0.15</size>
          </box>
        </geometry>
      </collision>
      <visual name="floor1_visual">
        <pose>1.19 0 <%=templateElevatorHeight+0.075%> 0 0 0</pose>
        <geometry>
          <box>
            <size>0.12 2.5 0.15</size>
          </box>
        </geometry>
      </visual>
    </link>
  </model>

  <model name="floor0">
    <pose><%=templateElevatorCenterX%> <%=templateElevatorCenterY-2.25%> 0.075 0 0 <%=Math::PI/(-2)%></pose>
    <static>true</static>
    <link name="link">
      <collision name="floor_collision">
        <geometry>
          <box>
            <size>2.0 5.0 0.15</size>
          </box>
        </geometry>
      </collision>
      <visual name="floor_visual">
        <geometry>
          <box>
            <size>2.0 5.0 0.15</size>
          </box>
        </geometry>
      </visual>
    </link>
  </model>

  <model name="floor1">
    <pose><%=templateElevatorCenterX%> <%=templateElevatorCenterY-2.25%> <%=templateElevatorHeight+0.075%> 0 0 <%=Math::PI/(-2)%></pose>
    <static>true</static>
    <link name="link">
      <collision name="floor_collision">
        <geometry>
          <box>
            <size>2.0 5.0 0.15</size>
          </box>
        </geometry>
      </collision>
      <visual name="floor_visual">
        <geometry>
          <box>
            <size>2.0 5.0 0.15</size>
          </box>
        </geometry>
      </visual>
    </link>
  </model>


  <!-- include all the shelves -->
  <% for columnInfo in columnInfos %>
    <% if (columnInfo['doesContainShelf'] == true) %>
      <!-- reset cursorY position and rowIndex -->
      <%
        cursorY = 0.0
        rowIndex = 0
      %>
      <!-- loop for all rows -->
      <% for rowInfo in rowInfos %>
        <!-- if the position is shelf, spawn a shelf -->
        <% if (rowInfo['isShelf'] == true) %>
          <%
            shelfName = "shelf_row#{rowIndex}_column#{columnIndex}"
            shelfNames.push(shelfName)
          %>
          <!-- <include>
            <uri>model://shelf</uri>
            <name><%=shelfName%></name>
            <pose><%=cursorX+halfShelfWidth%> <%=cursorY+halfShelfLength%> 0 0 0 <%=initialYawAngle%></pose>
          </include> -->
        <% end %>
        <!-- prepare for next row -->
        <%
          cursorY += rowInfo['space']
          rowIndex += 1
        %>
      <% end %>
    <% end %>
    <!-- prepare for next column -->
    <%
      cursorX += columnInfo['space']
      columnIndex += 1
    %>
  <% end %>


  <!-- include walls -->
  <include>
    <uri>model://walls</uri>
    <pose>0 0 0 0 0 0</pose>
  </include>


  <!-- include people
  <% for personIndex in (0...peopleAmount) %>
  <%
    if rand(2) == 1 then
      personStartX = 3
      personTargetX = 30
    else
      personStartX = 30
      personTargetX = 3
    end
    personStartY = rand(1...(roomWidth-1))
    personTargetX = rand(1...(roomLength-1))
  %>
    <actor name="free_person_<%=personIndex%>">
      <pose><%=personStartX%> <%=personStartY%> 1.24 0 0 0</pose>
      <skin>
        <filename>walk.dae</filename>
        <scale>1.0</scale>
      </skin>
      <animation name="walking">
        <filename>walk.dae</filename>
        <scale>1.0</scale>
        <interpolate_x>true</interpolate_x>
      </animation>


      <plugin name="free_person_<%=personIndex%>_plugin" filename="libActorAvoidingObstaclesPlugin.so">
        <target><%=personStartX%> <%=personTargetY%> 1.24</target>
        <target_weight>1.15</target_weight>
        <obstacle_weight>1.8</obstacle_weight>
        <ignore_obstacles>
          <model>walls</model>
          <model>ground_plane</model>
        </ignore_obstacles>
      </plugin>
    </actor>
  <% end %>
  -->


</world>
</sdf>
